To test speedup, I used these puzzle edges. I essentially took a valid
5x5 board that I found and manually computed counts, since it was 
faster than typing it out. I wanted to test the two predicates' speeds 
when taking this count and finding a tower.

counts(
    [4, 4, 2, 2, 1],
    [2, 1, 3, 2, 4],
    [5, 3, 3, 1, 2],
    [1, 2, 2, 3, 3])

| ?- speedup(R).

I found that the speedup achieved by using the finite domain solver 
was large! The ratio of original cpu time to finite domain solver cpu time
was roughly 9000.

R = 9016.0 ? 

(8930 ms) yes


The ambiguous puzzle I found had dimensions of 6. I don't think 
it is possible to have an ambiguous puzzle of dimension 3, and I 
figured it would be hard for dimension 4 as well, so I 
played around with dimension 6. This was call for the ambiguous 
puzzle I found.

| ?- ambiguous(
        6, 
        counts(
            [1,5,3,2,2,2],[2,2,1,3,3,3],[1,3,4,3,2,2],[3,2,1,2,2,4]), 
        T1, 
        T2).

The result of the two ambiguous puzzles was this 

T1 = [[6,1,2,3,5,4],[4,2,5,6,1,3],[2,4,1,5,3,6],[3,5,4,1,6,2],[1,6,3,2,4,5],[5,3,6,4,2,1]]
T2 = [[6,1,2,3,5,4],[4,3,5,6,1,2],[1,4,3,5,2,6],[2,5,4,1,6,3],[3,6,1,2,4,5],[5,2,6,4,3,1]] ? 

(2462 ms) yes

